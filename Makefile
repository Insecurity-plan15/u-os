# Modules in the project (you could 'find' these, but stating
# them explicitly allows for subdirectories like 'tmp' or 'doc'
# without upsetting the build process.
MODULES := libc kernel-core

CC := i686-elf-g++
LD := i686-elf-g++
AS := i686-elf-as
 
# Global CFLAGS. Add to them if you must, but don't remove '-MMD -I inc',
# which is used for header dependency tracking.
CFLAGS_global := -MMD -I inc
# Global ARFLAGS.
ARFLAGS := rc
 
.PHONY: clean mrproper
 
# Add whatever should be your default / global target.
all: bin/nexus
# @echo "Default target."
 
###################################################################
# What follows are several templates (think "functions"), which are
# later instantiated for each registered module ($(1) being the
# module name).
###################################################################
 
# Including a module's build.mk
define MK_template
include $(1)/build.mk
endef
 
# Setting a module's build rules for object files in <module>/obj.
define RULES_template
$(1)/obj/%.o: $(1)/src/%.cpp
	$$(CC) $$(CFLAGS) $$(CFLAGS_global) $$(CFLAGS_$(1)) -c $$< -o $$@

$(1)/obj/%.o: $(1)/src/%.s
	$$(AS) $$(AFLAGS) $$(AFLAGS_global) $$(AFLAGS_$(1)) $$< -o $$@
endef
 
# Setting a module's build rules for executable targets.
# (Depending on its sources' object files and any libraries.)
# Also adds a module's dependency files to the global list.
define PROGRAM_template
DEPENDENCIES := $(DEPENDENCIES) $(patsubst %,$(2)/obj/%.d,$(basename $($(1)_SOURCES)))
bin/$(1): $(patsubst %,$(2)/obj/%.o,$(basename $($(1)_SOURCES))) $(foreach library,$($(1)_LIBRARIES),lib/$(library))
	$$(LD) $$(LDFLAGS) $$(LDFLAGS_$(2)) $$^ -o $$@
endef
 
# Setting a module's build rules for archive targets.
# (Depending on its sources' object files.)
define ARCHIVE_template
DEPENDENCIES := $(DEPENDENCIES) $(patsubst %,$(2)/obj/%.d,$(basename $($(1)_SOURCES)))
lib/$(1): $(patsubst %,$(2)/obj/%.o,$(basename $($(1)_SOURCES)))
	$$(AR) $$(ARFLAGS) $$@ $$?
endef
 
# Linking a module's global inc into the global include directory
# (where they will be available as <module>/filename.hpp).
define INCLUDE_template
ifeq ($(wildcard inc/$(1)),)
    $$(shell ln -s ../$(1)/inc inc/$(1))
endif
endef
 
# Now, instantiating the templates for each module.
$(foreach module,$(MODULES),$(eval include $(module)/build.mk))
$(foreach module,$(MODULES),$(eval $(call RULES_template,$(module))))
$(foreach module,$(MODULES),$(eval $(foreach binary,$($(module)_PROGRAM),$(call PROGRAM_template,$(binary),$(module)))))
$(foreach module,$(MODULES),$(eval $(foreach library,$($(module)_ARCHIVE),$(call ARCHIVE_template,$(library),$(module)))))
$(foreach module,$(MODULES),$(eval $(call INCLUDE_template,$(module))))
 
# Include the dependency files (generated by GCC's -MMD option)
-include $(sort $(DEPENDENCIES))
 
clean:
	$(RM) $(foreach mod,$(MODULES),$(shell find $(mod)/obj -type f -name "*.o"))
 
mrproper: clean
	$(RM) $(foreach mod,$(MODULES),$(shell find $(mod)/obj -type f -name "*.d")) inc/* bin/* lib/*
